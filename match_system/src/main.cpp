// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>

#include <thread>
#include <mutex>
#include <condition_variable>
#include <unistd.h>

#include <queue>
#include <vector>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;

using namespace ::save_service;


struct Task {
    User user;
    std::string type;
};

struct MessageQueue {
    std::queue<Task> q;
    std::mutex m;
    std::condition_variable cv;
} message_queue;

class Pool {
    public:
        void save_result(int a, int b) {
            printf("Match result: %d %d\n", a, b);

            // 加入save服务的client端
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090)); // 改成数据库服务器的地址myserver
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                client.save_data("acs_797", "769278db", a, b);

                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << std::endl;
            }
        }

        bool check_match(uint32_t i, uint32_t j) {
            auto a = users[i], b = users[j];
            int dt = abs(a.score - b.score);
            int a_max_dif = wt[i] * 50;
            int b_max_dif = wt[j] * 50;
            return dt <= a_max_dif && dt <= b_max_dif;
        }

        void match() {
            for (uint32_t i = 0; i < wt.size(); i ++)
                wt[i] ++; // 等待秒数++
            while (users.size() > 1) {
                /**
                sort(users.begin(), users.end(), [&](User &a, User &b) {
                        return a.score < b.score;
                        });
                        */
                bool flag = true;
                for (uint32_t i = 0; i < users.size(); i ++) {
                    /*
                    auto a = users[i - 1], b = users[i];
                    if (b.score - a.score <= 50) {
                        users.erase(users.begin() + i - 1, users.begin() + i + 1); // 删掉两个节点
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    */
                    bool flag = true;
                    for (uint32_t j = i + 1; j < users.size(); j ++) {
                        if (check_match(i, j)) {
                            auto a = users[i], b = users[j];
                            users.erase(users.begin() + j);
                            users.erase(users.begin() + i);
                            wt.erase(wt.begin() + j);
                            wt.erase(wt.begin() + i);
                            save_result(a.id, b.id);
                            flag = false;
                            break;
                        }
                    }

                    if (!flag) break;
                }
                if (flag) break;
            }
        }

        void add(User user) {
            users.push_back(user);
            wt.push_back(0);
        }

        void remove(User user) {
            for (uint32_t i = 0; i < users.size(); i ++) {
                if (users[i].id == user.id) {
                    users.erase(users.begin() + i);
                    wt.erase(wt.begin() + i);
                    break;
                }
            }
        }

    private:
        std::vector<User> users;
        std::vector<int> wt; // waiting time(s)
} pool;

void consume_task() {
    while (true) {
        std::unique_lock<std::mutex> lck(message_queue.m);

        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 先将锁释放掉，然后阻塞，直到有线程唤醒，才会继续执行
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock(); // 一旦处理完共享变量 马上解锁

            // implement task
            if (task.type == "add") pool.add(task.user);
            else if (task.type == "remove") pool.remove(task.user);
        }
    }
}

class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            std::unique_lock<std::mutex> lck(message_queue.m); // 当变量消失，调用析构函数，自动解锁
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all(); // 唤醒所有被条件变量卡住的线程

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all(); // 唤醒所有被条件变量卡住的线程

            return 0;
        }

};

class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            /*
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            std::cout << "Incoming connection\n";
            std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
            */
            return new MatchHandler;
        }

        void releaseHandler( MatchIf* handler) override {
            delete handler;
        }
};

int main(int argc, char **argv) {
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    std::cout << "Start Match Server\n";

    std::thread matching_thread(consume_task); // 开启消费者线程

    server.serve();
    return 0;
}
